Process:
-Read in binary file
-convert binary to Instr
-Implement execution loop
-Print last item in stack to file and std::out



Exectution loop:
Switch dispach vs. threaded dispatch

Rust -> Switch
C++ -> Threaded

use a Makefile for this assignment (3 targets)
-Build
-Run (must be able to use cmd line args)
-Clean

Makefile should use cargo build --release

Switch:
	Think functional programing



LAB DAY 2:
--------------------------------------------------------------------------
-Read in Binary Files:
fs::read(file, bytes) <- should fille up a vecotor of unsigned 32 bit bytes

From Bin

"Just do what we did in the end of PA1 for the start of PA2"


-Convert Binary to Instructions


bytes = [0010101001 0010 1001101 01010 0101]

&[u8] <- slice 
&bytes[0..4] gets the program length for expample

fs::read(file_name) -> Result<Vec<u8>>

fs::read(file_name).unwrap() -> Vec<u8>

call this ^ file_contents

file_contents.iter() -> Iter<u8>  ///What about iter_mut()

call this ^ iterator -> mut iterator

iterator.next() -> u8

why not just pass a reference to the Vec<u8> and start index











































